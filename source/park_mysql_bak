#include <mysql/mysql.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

#include <errno.h>

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <time.h>

#include "msgqueue.h"
#include "billing.h"
#include "park_mysql.h"

typedef struct {
    char database_name[20];
    char table_park_name[30];       //最新的表
    //char table_park_name_old[30];   //次新的表
    char table_qianfei[30];        //长时间没有离开的表
    char table_billing_name[30];
    char server[20];
    char user[20];
    char password[20];
} MySqlCOMMENT;

typedef struct {
    char tablename[30];
    unsigned int no;
} ItemInTable;

#define ITEM_IN_OLDTABLE    1
#define ITEM_IN_NEWTABLE    2

//当一辆车进入，会用最新的表进行登记保存
//当一辆车离开，会先在旧的表进行查询，如果不在次新的表中，再在最新的表中查询
//当次新的表中已经没有未付费的信息时，则设置标志位，不再对次新表进行查询。
//当最新的表满了，需要建新表的时候，把次新的表中的未付费信息复制到欠费表中
//将最新的表设置为次新的表，新建的表设置为最新的表

//获取对应版本的计费规则
//当version=0时，获取最新的计费方式
static int getBilling(MYSQL *mysql, int version, _strBilling *pBill)
{
    char sql[128] = {0};
    MYSQL_RES *res;
    MYSQL_ROW row;
    char tbbilling[] = "billing";

    if (version == 0) {    
        sprintf(sql, "select * from %s where u8Version=(select max(u8Version) from %s)", tbbilling, tbbilling);
    } else {
        sprintf(sql, "select * from %s where u8Version=%d", tbbilling, version);
    }

    if (!mysql_real_query(mysql, sql, strlen(sql))) {
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);
        if (row) {
            pBill->u8Version = atoi(row[0]);
            pBill->u8FreeTime = atoi(row[1]);
            pBill->u8TimingCycle = atoi(row[2]);
            pBill->u8Price = atoi(row[3]);
            pBill->u16MaxTiming = atoi(row[4]);
            pBill->u8VIPDiscount = atoi(row[5]);

            mysql_free_result(res);
            return 0;
        }
    } else {
        printf("read table[%s] error[%s]\r\n", tbbilling, mysql_error(mysql));
    }

    mysql_free_result(res);
    return -1;
}

static void copy_nochargeitem_to_qianfeitable(MYSQL *mysql, MySqlCOMMENT *mysqlcomm)
{
    char sql[128] = {0};
    MYSQL_RES *res;
    MYSQL_ROW row;

    //printf("copy_nochargeitem_to_qianfeitable start\r\n");

    sprintf(sql, "select %s,%s,%s from %s where %s='N'",
            PLATE, COLOR, NUMBER, mysqlcomm->table_park_name, ISCHARGE);
    //printf("sql=%s\r\n", sql);

    if (!mysql_real_query(mysql, sql, strlen(sql))) {
        res = mysql_store_result(mysql);
        //获取返回的信息
        while(row = mysql_fetch_row(res)) {
            for ( int i = 0; i < mysql_num_fields(res); i++) {
                printf("%s ", row[i]);
            }
            printf("\r\n");
            //将消息写入到欠费表内
#if 1
            //printf("qianfei table=%s\r\n", mysqlcomm->table_qianfei);
            //printf("        table=%s\r\n", mysqlcomm->table_park_name);
            memset(sql, 0, sizeof(sql));
            sprintf(sql, "insert into %s(c12Plate,c3Color,c20TableName,u32NumberInTable) values('%s','%s','%s',%d)",
                    mysqlcomm->table_qianfei, row[0], row[1], mysqlcomm->table_park_name, atoi(row[2]));
            //printf("sql=%s\r\n", sql);
            if (!mysql_real_query(mysql, sql, strlen(sql))) {
                //add success
                //printf("add to qianfei table success\r\n");
            } else {
                //add failed
                printf("add to qianfei table failed,error=%s\r\n", mysql_error(mysql));
            }
#endif
        }
    } else {
        printf("%s:%s\r\n", __func__, mysql_error(mysql));
    }
    
    mysql_free_result(res);
}

static void do_work_when_car_in(MYSQL *mysql, MySqlCOMMENT *mysqlcomm, _strPlateMsg *ptrPlate, _strBilling *ptrBilling) 
{
    char sql[256] = {0};
    MYSQL_RES *res;
    MYSQL_ROW row;
    
    int parknumber = 10;
    char isVIP = 'N';
    //如果是进入
    printf("驶入！\r\n");
    //memcpy(&platemsg, &mqm->MessageType.plate, sizeof(mqm->MessageType.plate));

    printf("rec:%s:%s\r\n", ptrPlate->c3Color, ptrPlate->c16Plate);
    printf("rec time:%d-%d-%d %d:%d\r\n", ptrPlate->time.year, ptrPlate->time.mon, ptrPlate->time.day,\
            ptrPlate->time.hour, ptrPlate->time.min);

    //memset(sql, 0, sizeof(sql));  
    sprintf(sql, "select %s,%s from %s where %s='N' and %s='%s' and %s='%s'",\
            COLOR, PLATE, mysqlcomm->table_park_name, ISCHARGE, PLATE, ptrPlate->c16Plate, COLOR, ptrPlate->c3Color);

    //printf("sql=%s\r\n", sql);

    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {

        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);

        if (row) {
            //如果搜索结果不是空的,也就是有欠费记录，则提示缴费。缴费之后才会允许进入。
            do {
                for ( int i = 0; i < mysql_num_fields(res); i++) {
                    printf("%s ", row[i]);
                }
                printf("\r\n");
            } while(row = mysql_fetch_row(res));
        } else {
            //如果搜索结果是空的,说明车是没有欠费记录(第一次来的是肯定没有欠费记录的)
            //把该条消息保存到数据库中
            char timebuf[20] = {0};

            sprintf(timebuf, "%d-%d-%d %d:%d:%d", ptrPlate->time.year, ptrPlate->time.mon, ptrPlate->time.day,
                    ptrPlate->time.hour, ptrPlate->time.min, ptrPlate->time.sec);

            memset(sql, 0, sizeof(sql));
            sprintf(sql, 
                    "insert into %s(%s,%s,%s,%s,%s,%s,%s,%s) values(%d,'%s','%s','%s','%c','N',0,%d)",
                    mysqlcomm->table_park_name, PARKNUMBER , COLOR, PLATE, INTIME, ISVIP, ISCHARGE, ALREADYPAY, BILLVERSION,\
                    parknumber, ptrPlate->c3Color, ptrPlate->c16Plate, timebuf, isVIP, ptrBilling->u8Version);

            //printf("sql=%s\r\n", sql);
            if (mysql_real_query(mysql, sql, strlen(sql))) {
                printf("Insert into failed:%s\r\n", mysql_error(mysql));
            }
        }
    } else {
        printf("error:%s\r\n", mysql_error(mysql));
    }

    mysql_free_result(res);
}

/*
*   
*/
static ItemInTable *get_plate_in_which_table(MYSQL *mysql, MySqlCOMMENT *mysqlcomm,  _strPlateMsg *ptrPlate)
{
    char sql[256] = {0};
    MYSQL_RES *res;
    MYSQL_ROW row;

    ItemInTable *iit = (ItemInTable *)malloc(sizeof(ItemInTable));
    if(iit == NULL)
        return NULL;

    sprintf(sql, "select c20TableName,u32NumberInTable from %s where c12Plate='%s' and c3Color='%s'",
            mysqlcomm->table_qianfei, ptrPlate->c16Plate, ptrPlate->c3Color);    

    if (!mysql_real_query(mysql, sql, strlen(sql))) {
        //在欠费中发现了欠费记录
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);
        if(row) {
            printf("在欠费表中发现欠费记录\r\n");
            //strcpy(oldtable_name, row[0]);
            //oldtable_num = atoi(row[1]);
            //memset(sql, 0, sizeof(sql));
            //sprintf(sql, "select unix_timestamp(%s),%s,%s,%s,%s \
            //        from %s \
            //        where %s=%d",                                                                                         
            //        INTIME, ISVIP, PARKTIME, NUMBER, BILLVERSION,                                                         
            //        oldtable_name, NUMBER, oldtable_num);                                                                 

            //if (!mysql_real_query(mysql, sql, strlen(sql))) {                                                             
            //    flag = ITEM_IN_OLDTABLE;                                                                                  
            //    goto FIND_ITEM_OK;                                                                                        
            //} else {                                                                                                      
            //    printf("can't find item\r\n");                                                                            
            //}
            strcpy(iit->tablename, row[0]);
            iit->no = atoi(row[1]);

            return iit;
        } else {
            //如果没有搜索到记录则直接去下方执行
            goto FIND_IN_CURPARKTABLE;
        }
    } else {
        printf("%s:%s\r\n", __func__, mysql_error(mysql));
    }

FIND_IN_CURPARKTABLE:
    memset(sql, 0, sizeof(sql));
    sprintf(sql, "select %s from %s where %s='%s' and %s='%s' and %s='N'",
            NUMBER, mysqlcomm->table_park_name, COLOR, ptrPlate->c3Color, PLATE, ptrPlate->c16Plate, ISCHARGE);

    printf("无欠费记录，结束本次缴费\r\n");

    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res); 
        if (row) {
            strcpy(iit->tablename, row[0]);
            iit->no = atoi(row[1]);

            return iit;
        }
    } else {
        printf("%s:%s\r\n", __func__, mysql_error(mysql));
    }

    return NULL;
}

static void do_work_when_car_out(MYSQL *mysql, ItemInTable *itt)
{
    char sql[256] = {0};
    char oldtable_name[30] = {0};
    unsigned int oldtable_num = 0;
    MYSQL_RES *res;
    MYSQL_ROW row;
    struct tm tm_time;
    int flag = 0;

    time_t totalSeconds;
    int last_time;
    int timeinterval;
    int canparktime;
            
    _strBilling tmpBilling;

    printf("驶出!\r\n");

    //先在欠费表中搜索
    sprintf(sql, "select c20TableName,u32NumberInTable from %s where c12Plate='%s' and c3Color='%s'",
            mysqlcomm->table_qianfei, ptrPlate->c16Plate, ptrPlate->c3Color);
    if (!mysql_real_query(mysql, sql, strlen(sql))) {
        //在欠费中发现了欠费记录
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);
        if(row) {
            printf("在欠费表中发现欠费记录\r\n");
            strcpy(oldtable_name, row[0]);
            oldtable_num = atoi(row[1]);
            memset(sql, 0, sizeof(sql));
            sprintf(sql, "select unix_timestamp(%s),%s,%s,%s,%s \
                    from %s \
                    where %s=%d",
                    INTIME, ISVIP, PARKTIME, NUMBER, BILLVERSION,
                    oldtable_name, NUMBER, oldtable_num);

            if (!mysql_real_query(mysql, sql, strlen(sql))) {
                flag = ITEM_IN_OLDTABLE;
                goto FIND_ITEM_OK;
            } else {
                printf("can't find item\r\n");
            }
            return;
        }//如果没有搜索到记录则直接去下方执行
    } else {
    
    }

//    sprintf(sql, "select unix_timestamp(%s),%s,%s,%s,%s \
//            from %s \
//            where %s='N' and \
//            %s='%s' and \
//            %s='%s'",
//            INTIME, ISVIP, PARKTIME, NUMBER, BILLVERSION,
//            mysqlcomm->table_park_name_old, 
//            ISCHARGE, 
//            PLATE, ptrPlate->c16Plate, 
//            COLOR, ptrPlate->c3Color);
//
//
//    if (!mysql_real_query(mysql, sql, strlen(sql))) {
//        //在旧表中
//        flag = ITEM_IN_OLDTABLE;
//        goto FIND_ITEM_OK;
//    } 

        //不在欠费表中
        //在新表中查询

    printf("无欠费记录，结束本次缴费\r\n");

    memset(sql, 0, sizeof(sql));
    sprintf(sql, "select unix_timestamp(%s),%s,%s,%s,%s \
            from %s \
            where %s='N' and \
            %s='%s' and \
            %s='%s'",
            INTIME, ISVIP, PARKTIME, NUMBER, BILLVERSION,
            mysqlcomm->table_park_name, 
            ISCHARGE, 
            PLATE, ptrPlate->c16Plate, 
            COLOR, ptrPlate->c3Color);

    //printf("sql=%s\r\n", sql);
    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {

        flag = ITEM_IN_NEWTABLE;

FIND_ITEM_OK:
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);

        if ( row ) {
            //搜索到对应的停车信息
            if (mysql_num_fields(res) == 5) {
                //检索的两个元素
                //0:车辆进入的时间戳
                //1:车辆是否是会员
                //2:车辆能够停多久
                //3:信息编号
                //4:计费规则的版本
                printf("%s---%s---%s---%s\r\n", row[0], row[1], row[2],row[3]);
                //保存车辆出去时的时间 
                tm_time.tm_year = ptrPlate->time.year - 1900;
                tm_time.tm_mon = ptrPlate->time.mon - 1;
                tm_time.tm_mday = ptrPlate->time.day;
                tm_time.tm_hour = ptrPlate->time.hour;
                tm_time.tm_min = ptrPlate->time.min;
                tm_time.tm_sec = ptrPlate->time.sec;
                //获取停车的时间戳
                totalSeconds = mktime(&tm_time);
                //获取车辆进入时的时间戳
                last_time = atoi(row[0]);
                //计算两个时间戳之间的时间间隔，也就是获取到实际停车的时间
                // 除以60转换为分钟数
                timeinterval = difftime(totalSeconds, last_time)/60;
                //被允许停车的时间
                canparktime = atoi(row[2]);
                //获取计费规则
                getBilling(mysql, atoi(row[4]), &tmpBilling);
#if 0
                printf("**************\r\n");
                printf("version=%d\r\n",tmpBilling.u8Version);
                printf("freetime=%d\r\n",tmpBilling.u8FreeTime);
                printf("timecycle=%d\r\n",tmpBilling.u8TimingCycle);
                printf("price=%d\r\n",tmpBilling.u8Price);
                printf("maxtiming=%d\r\n",tmpBilling.u16MaxTiming);
                printf("vipdis=%d\r\n",tmpBilling.u8VIPDiscount);
                printf("**************\r\n");
#endif
                printf("canparktime=%d, time interval=%d\r\n", canparktime, timeinterval);
                if ( timeinterval < tmpBilling.u8FreeTime ) {
                    //实际停车时间小于免费时长，则不收取费用直接放行
                    printf("------free time\r\n");
                } else if (timeinterval > tmpBilling.u16MaxTiming) {
                    //实际停车时间大于每天的最大计费单位
                    printf("******max time\r\n");
                } else if (canparktime < timeinterval) {
                    //允许停车时间小于实际停车时间,需要交费
                    printf("please jiaoqian\r\n");
                    int n1 = timeinterval / tmpBilling.u8TimingCycle;
                    int n2;
                    if (timeinterval%tmpBilling.u8TimingCycle) {
                        n2 = n1 + 1;
                    } else {
                        n2 = n1;
                    }
                    n2 *= tmpBilling.u8Price;
                    printf("需要缴费%d元\r\n", n2);

                } else if (canparktime >= timeinterval) {
                    //允许停车时间大于等于实际停车时间，可以直接开门放行
                    //OPENDOOR(pstrOUTCameraIP, CAMERA_PORT);
                    char timebuf[20];
                    char tablename[30] = {0};

                    sprintf(timebuf, "%d-%d-%d %d:%d:%d", ptrPlate->time.year, ptrPlate->time.mon, ptrPlate->time.day,
                            ptrPlate->time.hour, ptrPlate->time.min, ptrPlate->time.sec);

                    if (flag == ITEM_IN_OLDTABLE) {
                        strcpy(tablename, oldtable_name);
                    } else {
                        strcpy(tablename, mysqlcomm->table_park_name);
                    }

                    memset(sql, 0, sizeof(sql));
                    sprintf(sql,
                            "update %s set %s='%s',%s='Y' where %s=%d",
                            tablename,
                            OUTTIME, timebuf, 
                            ISCHARGE, 
                            NUMBER, atoi(row[3]));

                    printf("sql=%s\r\n", sql);
                    if (mysql_real_query(mysql, sql, strlen(sql))) {
                        printf("update failed:%s\r\n", mysql_error(mysql));
                    }
                }
            }
        }
    } else {
        printf("error:%s\r\n", mysql_error(mysql));
    }
    
    mysql_free_result(res);
}

static void do_work_add_new_billing(MYSQL *mysql, MySqlCOMMENT *mysqlcomm, _strBilling *ptrBilling)
{
   char sql[128] = {0};

    sprintf(sql, "insert into %s(u8FreeTime, u8TimingCycle, u8Price, u16MaxTiming, u8VIPDiscount) \
            values(%d,%d,%d,%d,%d)", mysqlcomm->table_billing_name,
            ptrBilling->u8FreeTime, ptrBilling->u8TimingCycle, ptrBilling->u8Price, 
            ptrBilling->u16MaxTiming, ptrBilling->u8VIPDiscount);

    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {
        //添加成功
    } else {
        //添加失败
    }
}

static unsigned int get_mysql_park_table_max_number(MYSQL *mysql, char *name)
{
    char sql[120] = {0};
    MYSQL_RES *res;
    MYSQL_ROW row;
    unsigned int ret = 0;

    sprintf(sql, "select %s from %s where %s=(select max(%s) from %s)", NUMBER, name, NUMBER, NUMBER, name);
    
    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {
        //成功
        res = mysql_store_result(mysql);
        row = mysql_fetch_row(res);

        if(row) {
            ret = atoi(row[0]);
        }
    } 

    mysql_free_result(res);
    //失败
    return ret;
}

static void create_mysql_table(MYSQL *mysql, char *name)
{
    char sql[512] = {0};

    sprintf(sql, "create table %s( u32Number int(4) unsigned primary key auto_increment,\
            u8ParkNumber int(1) unsigned default 0,\
            u8BillingVersion int(1) unsigned default 0,\
            c3Color char(3) default 'NN',\
            c12Plate char(12) default 'NULL',\
            InTime datetime,\
            OutTime datetime,\
            u32CanParkTime int(4) unsigned default 0,\
            cIsVIP char(1) default 'N',\
            cIsCharge char(1) default 'N',\
            u8AlreadyPay int(1) unsigned default 0)", name); //len>=386

    //sprintf(sql, "create table %s(u8Version int(1) unsigned primary key auto_increment,\
        u8FreeTime int(1) unsigned default 0,\
        u8TimingCycle int(1) unsigned default 0,\
        u8Price int(1) unsigned default 0,\
        u16MaxTiming int(2) unsigned default 0,\
        u8VIPDiscount int(1) unsigned default 0)", name);

    if ( !mysql_real_query(mysql, sql, strlen(sql)) ) {
        //添加成功
        printf("create table[%s] success\r\n", name);
        memset(sql, 0, sizeof(sql));
        sprintf(sql, "alter table %s add index color_plate(%s(2),%s(12))", name, COLOR, PLATE);
        if (!mysql_real_query(mysql, sql, strlen(sql))) {
            printf("index create success\r\n");
        } else {
            printf("index create failed,error=%s\r\n", mysql_error(mysql));
        }
    } else {
        //添加失败
        printf("create table[%s] failed, error:%s\r\n", name, mysql_error(mysql));
    }
}

int main(int argc, char *argv[])
{
    MYSQL *mysql = NULL;
    //MYSQL_RES *mysql_res;
    //MYSQL_ROW mysql_row;

    unsigned int port = 0;
    char *unix_socket = NULL;
    unsigned long client_flag = 0;

    MySqlCOMMENT mysql_comm;
    memset(&mysql_comm, 0, sizeof(MySqlCOMMENT));
    strcpy(mysql_comm.database_name, "waming_park_db");
    strcpy(mysql_comm.table_park_name, "park01");
    strcpy(mysql_comm.table_billing_name, "billing");
    strcpy(mysql_comm.server, "localhost");
    strcpy(mysql_comm.user, "root");
    strcpy(mysql_comm.password, "frogshealth");
    strcpy(mysql_comm.table_qianfei, "table_qianfei");

    //char server[] = "localhost";
    //char user[] = "root";
    //char passwd[] = "frogshealth";
    //char dbname[] = "waming_park_db";
    //char tbbilling[] = "billing";

    char recvbuff[32];

    _strPlateMsg platemsg;
    _strBilling Billing; 
    _strBilling NewBilling;
    
    printf("do park_mysql\r\n");

    mysql = mysql_init(NULL);
    if ( !mysql_real_connect(mysql, mysql_comm.server, mysql_comm.user, mysql_comm.password, 
                mysql_comm.database_name, port, unix_socket, client_flag)) 
    {
        fprintf(stderr, "%s\n", mysql_error(mysql));
        return -1; 
    }   

    mysql_set_character_set(mysql,"gbk");

    int msgid = getMsgQueue();
    MsgQueueMessage *mqm = NULL;

    //读取表中最新的计费标准
    getBilling(mysql, 0, &Billing);

    while(1)
    {
        memset(&platemsg, 0, sizeof(platemsg));

        recvMsgQueue(msgid, CLIENT_TYPE, recvbuff);                                                               
        mqm = (MsgQueueMessage *)recvbuff;

        printf("recv msgqueue, %s\r\n", recvbuff);
        if ( strncmp(mqm->c4Head, MESSAGE_CAR_IN, strlen(MESSAGE_CAR_IN)) == 0) {
            
            memcpy(&platemsg, &mqm->MessageType.plate, sizeof(mqm->MessageType.plate));

            //查询新表中的最大编号
            unsigned int number = get_mysql_park_table_max_number(mysql, mysql_comm.table_park_name);
            printf("table[%s] has %d message\r\n", mysql_comm.table_park_name, number);

            if (number > 10) {
                char newname[] = "table_park_190129";

                //将表中的欠费信息按规则复制到qianfei表中
                copy_nochargeitem_to_qianfeitable(mysql, &mysql_comm);
                //按规则创建新表
                create_mysql_table(mysql, newname);
                //将新建的表名复制给新表名
                memset(mysql_comm.table_park_name, 0, sizeof(mysql_comm.table_park_name));
                strncpy(mysql_comm.table_park_name, newname, sizeof(newname));
            }

            do_work_when_car_in(mysql, &mysql_comm, &platemsg, &Billing);

        } else if ( strncmp(mqm->c4Head, MESSAGE_CAR_OUT, strlen(MESSAGE_CAR_OUT)) == 0) {
            
            memcpy(&platemsg, &mqm->MessageType.plate, sizeof(mqm->MessageType.plate));
            do_work_when_car_out(mysql, &mysql_comm, &platemsg);
        
        } else if ( strncmp(mqm->c4Head, MESSAGE_SET_BILLING, strlen(MESSAGE_SET_BILLING)) == 0) {
            //SB_xx_xx_xxx_xx_xxxx_xx
            //写入设置信息到数据库中
            memset(&NewBilling, 0, sizeof(NewBilling));
            memcpy(&NewBilling, &mqm->MessageType.billing, sizeof(mqm->MessageType.billing));

            printf("add billing\r\n");
            printf("u8Version=%d\r\n", NewBilling.u8Version);
            printf("u8FreeTime=%d\r\n", NewBilling.u8FreeTime);
            printf("u8TimingCycle=%d\r\n", NewBilling.u8TimingCycle);
            printf("u8Price=%d\r\n", NewBilling.u8Price);
            printf("u16MaxTiming=%d\r\n", NewBilling.u16MaxTiming);
            printf("u8VIPDiscount=%d\r\n", NewBilling.u8VIPDiscount);

            do_work_add_new_billing(mysql, &mysql_comm, &NewBilling);
        }
    }

    //mysql_free_result(mysql_res);
    mysql_close(mysql);

    return 0;
}
